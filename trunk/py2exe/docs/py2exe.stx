py2exe

  Build standalone window programs from python scripts

    Copyright (C) 2000, "Thomas Heller", mailto:theller@python.net

  Abstract
  
    **py2exe** is a distutils extension to onvert python scripts into
    executable windows programs.

  News

    **2000/01/24** -- *<font color="red">Release 0.2.0 finds needed dlls automatically, has
    new command-line options, can build programs containing modules
    imported via the registry (pythoncom, pywintypes).</font>*

    **2000/01/24** -- *Release 0.1.1 fixes the bugs of the first beta-release
    and should work as advertised.*

    **2000/01/19** -- *First public beta-version released and announced on comp.lang.python.*

  Using **py2exe**

    Assuming you have a python script 'myscript.py' which you
    want to convert into an executable windows program.
    If you don't already have written a *distutils* setup-script,
    write one, including the statement
    'import py2exe' before calling the setup function.

    Here's a simple one::

	 # setup.py
	 from distutils.core import setup
	 import py2exe

	 setup(name="myscript",
	       scripts=["myscript.py"],
	 )
	
    Running::

	python setup.py py2exe --help

    will display all available command-line flags for the **py2exe** command.

    Now you can call the setup script like this::

	 python setup.py py2exe

    and a sub-directory 'dist\myscript' will be created,
    containing the files 'myscript.exe' and 'python20.dll'.
    If your script uses compiled c-extension modules, they will be copied here
    as well, also all dlls needed at runtime.

    These files include everything that is needed for your program,
    even if the target computer doesn't have python installed.

  How does it work?

    **py2exe** uses python's modulefinder to load your script and find all
    python and extension modules needed to run it. Pure python modules
    are compiled into '.pyc' or '.pyo' files in a temporary directory.
    Compiled extension modules ('.pyd') are also found and parsed for binary
    dependencies.

    A zip-compatible archive will be built, containing all files from this
    directory as well as your script, and appended to a custom python
    interpreter supplied with **py2exe**.

    Running this custom python interpreter, now called 'myscript.exe',
    will install an import hook so that the modules needed can be
    imported from the zip-archive, and your script will be started.

    In simple cases, only 'pythonxx.dll' is needed in addition to
    'myscript.exe'. If, however, your script needs extension modules,
    unfortunately those cannot be included or imported
    from the zip-archive, so they are needed as separate files (and
    are copied into the 'dist\myscript' directory).

    Attention: **py2exe** tries to track down _all_ binary dependencies
    for all pyd's and dll's copied to the dist directory recursively,
    and copies all these dependend files into the dist directory.
    **py2exe** has a builtin list of some system dlls which are
    not copied, but this list can never be complete.
    Before distributing these files please make sure that you
    have the rights to do so.
    

  Reference
    
    Command line flags for the **py2exe** command (run
    'python setup.py py2exe --help' for an up-to-date list):
  

    **--debug** or **-g** -- Create runtime with debugging information.
    Default is to create a release runtime binary. Note that for debug
    builds, *all* extension modules must be available in debug versions.

    **--optimize** or **-O** *0|1|2* -- optimization level: -O1 for "python -O",
    -O2 for "python -OO" and -O0 to disable (default: -O0)

    **--dist-dir** or **-d** *directory* -- directory to put the final files in

    **--force** or **-f** -- force a rebuild of everything

    **--keep-temp** or **-k** -- keep the pseudo installation tree around after
    creating the distribution files

    **--console** or **-c** -- build a console application, similar to
    running the script with 'python.exe'. The default is to create
    a console application if the script has the extension '.py',
    a console-less GUI application if the script has the extension '.pyw'

    **--windows** or **-w** -- build a windows application, similar to
    running the script with 'pythonw.exe'

    **--excludes** or **-e** *list* -- comma separated list of modules to exclude

    **--includes** or **-i** *list* -- comma separated list of modules to include.
    Note that *includes* overrides *excludes*.

    The following flags are not yet implemented:
	
    **--unbuffered** or **-u** -- unbuffered binary *stdout* and *stderr*

    **--unicode** or **-U** -- treat string literals as unicode

  Requirements for using **py2exe**

    Python 1.5

	   "Distutils":http://www.python.org/sigs/distutils-sig/" is required.
	   It is included in Python 1.6 and later, if you are using python 1.5
	   you can download and install the latest release from
	   "python.org":http://www.python.org/sigs/distutils-sig/download.html".

	   To build the zip-compatible archive **py2exe** needs either a 'zip.exe'
	   utility somewhere on the PATH, or Jim Ahlstrom's zipfile-module.

    Python 1.6 and later

        Everything is already included in the python distribution.

  Download and project information

    Binaries (windows installer)

      For Python 1.5: "py2exe-0.2.0.win32-py1.5.exe":http://starship.python.net/crew/theller/py2exe/py2exe-0.2.0.win32-py1.5.exe.

      For Python 2.0: "py2exe-0.2.0.win32-py2.0.exe":http://starship.python.net/crew/theller/py2exe/py2exe-0.2.0.win32-py2.0.exe.

    Source code

      Download "py2exe-0.2.0.zip":http://starship.python.net/crew/theller/py2exe/py2exe-0.2.0.zip.

    Older versions still available

      "py2exe-0.1.1.win32-py1.5.exe":http://starship.python.net/crew/theller/py2exe/py2exe-0.1.1.win32-py1.5.exe

      "py2exe-0.1.1.win32-py2.0.exe":http://starship.python.net/crew/theller/py2exe/py2exe-0.1.1.win32-py2.0.exe

      "py2exe-0.1.1.zip":http://starship.python.net/crew/theller/py2exe/py2exe-0.1.1.zip

    The project is hosted at "http://sourceforge.net/projects/py2exe/":http://sourceforge.net/projects/py2exe/.

  Feedback

    This is still an early release. <font color="red">I need feedback!</font>

    If this works for you, or if it doesn't work at all, please drop "me":mailto:theller@python.net
    a note.

    For bug reports it is most useful to include information about the python and windows version
    you use and the output of the "python setup.py py2exe" command.


  Future plans

    Provide a way to require even less files: provide more custom
    prebuilt interpreters, so that eventually everything can be packed
    into a *single* file (which can be run without unpacking anything).

    Provide a possibility to copy a set of additional files and/or directories
    to the dist directory.

    Pack Tkinter programs?

    Pack COM servers written in python?

  Related work

    Gordon McMillan's "installer":http://www.mcmillan-inc.com/install1.html
    is similar to **py2exe**, but more mature.
    Gordon goes in great detail explaining his (and this) approach,
    and also discusses other solutions.

    **py2exe** compared to **installer**

    Advantages:

      - Builds also debug versions of your programs.

      - Complete control over python's optimization (-O and -OO flags)
        and buffering of stdout and stderr (-u flag) in the resulting
        executable.

      - The sourcecode is distributed with a distutils setup script,
      so you can easily rebuild it yourself (C-compiler required).

    Disadvantages:

      - **py2exe** only creates what Gordon calls 'standalone'
          programs.

      - Since I do not use Tkinter, I did not care about that.
